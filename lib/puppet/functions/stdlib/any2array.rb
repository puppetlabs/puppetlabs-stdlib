# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# any2array.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      This converts any object to an array containing that object.
#
#    Empty argument lists are converted to an empty array. Arrays are left
#    untouched. Hashes are converted to arrays of alternating keys and values.
#
#    > *Note:*
#      since Puppet 5.0.0 it is possible to create new data types for almost any
#      datatype using the type system and the built-in
#      [`Array.new`](https://puppet.com/docs/puppet/latest/function.html#conversion-to-array-and-tuple)
#      function is used to create a new Array..
#
#      ```
#      $hsh = {'key' => 42, 'another-key' => 100}
#      notice(Array($hsh))
#      ```
#
#    Would notice `[['key', 42], ['another-key', 100]]`
#
#    The Array data type also has a special mode to "create an array if not already an array"
#
#      ```
#      notice(Array({'key' => 42, 'another-key' => 100}, true))
#      ```
#
#    Would notice `[{'key' => 42, 'another-key' => 100}]`, as the `true` flag prevents the hash from being
#    transformed into an array.
#
#    @return [Array] The new array containing the given object
#
#
Puppet::Functions.create_function(:'stdlib::any2array') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    if arguments.empty?
      return []
    end

    return arguments unless arguments.length == 1
    return arguments[0] if arguments[0].is_a?(Array)
    return [] if arguments == ['']
    if arguments[0].is_a?(Hash)
      result = []
      arguments[0].each do |key, value|
        result << key << value
      end
      return result
    end
    return arguments
  
  end
end
