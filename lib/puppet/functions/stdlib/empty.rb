# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# empty.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      **Deprecated:** Returns true if the variable is empty.
#
#    @return
#      Returns `true` if the argument is an array or hash that contains no elements,
#      or an empty string. Returns `false` when the argument is a numerical value.
#
#    > *Note*: **Deprecated** from Puppet 5.5.0, the built-in
#    [`empty`](https://puppet.com/docs/puppet/6.4/function.html#empty) function will be used instead.
#
#
Puppet::Functions.create_function(:'stdlib::empty') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "empty(): Wrong number of arguments given (#{arguments.size} for 1)") if arguments.empty?
    value = arguments[0]

    unless value.is_a?(Array) || value.is_a?(Hash) || value.is_a?(String) || value.is_a?(Numeric)
      raise(Puppet::ParseError, 'empty(): Requires either array, hash, string or integer to work with')
    end

    return false if value.is_a?(Numeric)
    result = value.empty?
    return result
  
  end
end
