# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# time.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      This function will return the current time since epoch as an integer.
#
#    @return
#      the current time since epoch as an integer.
#
#    @example **Usage**
#
#      time()
#      Will return something like: 1311972653
#
#    > *Note:* that since Puppet 4.8.0 the Puppet language has the data types Timestamp (a point in time) and
#    Timespan (a duration). The following example is equivalent to calling time() without
#    any arguments:
#
#    ```Timestamp()```
#
#
#
Puppet::Functions.create_function(:'stdlib::time') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    # The Time Zone argument is optional ...
    time_zone = arguments[0] if arguments[0]

    if !arguments.empty? && (arguments.size != 1)
      raise(Puppet::ParseError, "time(): Wrong number of arguments given #{arguments.size} for 0 or 1")
    end

    time = Time.new

    # There is probably a better way to handle Time Zone ...
    if time_zone && !time_zone.empty?
      original_zone = ENV['TZ']

      local_time = time.clone
      local_time = local_time.utc

      ENV['TZ'] = time_zone

      result = local_time.localtime.strftime('%s')

      ENV['TZ'] = original_zone
    else
      result = time.localtime.strftime('%s')
    end

    # Calling Time#to_i on a receiver changes it.  Trust me I am the Doctor.
    result = result.to_i

    return result
  
  end
end
