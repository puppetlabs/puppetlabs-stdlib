# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# try_get_value.rb
#
# ---- original file header ----
#
# @summary
#         @summary
#        **DEPRECATED:** this function is deprecated, please use dig() instead.
#
#      @return
#        Looks up into a complex structure of arrays and hashes and returns a value
#        or the default value if nothing was found.
#
#      Key can contain slashes to describe path components. The function will go down
#      the structure and try to extract the required value.
#      ``
#      $data = {
#        'a' => {
#          'b' => [
#            'b1',
#            'b2',
#            'b3',
#          ]
#        }
#      }
#
#      $value = try_get_value($data, 'a/b/2', 'not_found', '/')
#      => $value = 'b3'
#      ```
#      ```
#      a -> first hash key
#      b -> second hash key
#      2 -> array index starting with 0
#
#      not_found -> (optional) will be returned if there is no value or the path did not match. Defaults to nil.
#      / -> (optional) path delimiter. Defaults to '/'.
#      ```
#
#      In addition to the required "key" argument, "try_get_value" accepts default
#      argument. It will be returned if no value was found or a path component is
#      missing. And the fourth argument can set a variable path separator.
#
#
Puppet::Functions.create_function(:'stdlib::try_get_value') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    warning('try_get_value() DEPRECATED: this function is deprecated, please use dig() instead.')
    data = args[0]
    path = args[1] || ''
    default = args[2]

    if !(data.is_a?(Hash) || data.is_a?(Array)) || path == ''
      return default || data
    end

    separator = args[3] || '/'
    path = path.split(separator).map { |key| (key =~ %r{^\d+$}) ? key.to_i : key }
    function_dig([data, path, default])
  
  end
end
