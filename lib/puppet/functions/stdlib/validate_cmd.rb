# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'puppet/util/execution'
require 'tempfile'

#
# validate_cmd.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Perform validation of a string with an external command.
#
#    The first argument of this function should be a string to
#    test, and the second argument should be a path to a test command
#    taking a % as a placeholder for the file path (will default to the end).
#    If the command, launched against a tempfile containing the passed string,
#    returns a non-null value, compilation will abort with a parse error.
#    If a third argument is specified, this will be the error message raised and
#    seen by the user.
#
#    @return
#      validate of a string with an external command
#
#    A helpful error message can be returned like this:
#
#    @example **Usage**
#
#      Defaults to end of path
#        validate_cmd($sudoerscontent, '/usr/sbin/visudo -c -f', 'Visudo failed to validate sudoers content')
#
#      % as file location
#        validate_cmd($haproxycontent, '/usr/sbin/haproxy -f % -c', 'Haproxy failed to validate config content')
#
#
#
Puppet::Functions.create_function(:'stdlib::validate_cmd') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    if (args.length < 2) || (args.length > 3)
      raise Puppet::ParseError, "validate_cmd(): wrong number of arguments (#{args.length}; must be 2 or 3)"
    end

    msg = args[2] || "validate_cmd(): failed to validate content with command #{args[1].inspect}"

    content = args[0]
    checkscript = args[1]

    # Test content in a temporary file
    tmpfile = Tempfile.new('validate_cmd')
    begin
      tmpfile.write(content)
      tmpfile.close

      check_with_correct_location = if checkscript =~ %r{\s%(\s|$)}
                                      checkscript.gsub(%r{%}, tmpfile.path)
                                    else
                                      "#{checkscript} #{tmpfile.path}"
                                    end

      if Puppet::Util::Execution.respond_to?('execute')
        Puppet::Util::Execution.execute(check_with_correct_location)
      else
        Puppet::Util.execute(check_with_correct_location)
      end
    rescue Puppet::ExecutionFailure => detail
      msg += "\n#{detail}"
      raise Puppet::ParseError, msg
    rescue StandardError => detail
      msg += "\n#{detail.class.name} #{detail}"
      raise Puppet::ParseError, msg
    ensure
      tmpfile.unlink
    end
  
  end
end
