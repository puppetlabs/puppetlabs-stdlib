# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# abs.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      **Deprecated:** Returns the absolute value of a number
#
#    For example -34.56 becomes 34.56.
#    Takes a single integer or float value as an argument.
#
#    > *Note:*
#      **Deprected** from Puppet 6.0.0, the built-in
#      ['abs'](https://puppet.com/docs/puppet/6.4/function.html#abs)function will be used instead.
#
#    @return The absolute value of the given number if it was an Integer
#
#
#
Puppet::Functions.create_function(:'stdlib::abs') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "abs(): Wrong number of arguments given (#{arguments.size} for 1)") if arguments.empty?

    value = arguments[0]

    # Numbers in Puppet are often string-encoded which is troublesome ...
    if value.is_a?(String)
      if value =~ %r{^-?(?:\d+)(?:\.\d+){1}$}
        value = value.to_f
      elsif value =~ %r{^-?\d+$}
        value = value.to_i
      else
        raise(Puppet::ParseError, 'abs(): Requires float or integer to work with')
      end
    end

    # We have numeric value to handle ...
    result = value.abs

    return result
  
  end
end
