# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# has_interface_with
#
# ---- original file header ----
#
# @summary
#       @summary
#      Returns boolean based on kind and value.
#
#    @return
#      boolean values `true` or `false`
#
#    Valid kinds are `macaddress`, `netmask`, `ipaddress` and `network`.
#
#    @example **Usage**
#      has_interface_with("macaddress", "x:x:x:x:x:x") # Returns `false`
#      has_interface_with("ipaddress", "127.0.0.1") # Returns `true`
#
#    @example If no "kind" is given, then the presence of the interface is checked:
#      has_interface_with("lo") # Returns `true`
#
#
Puppet::Functions.create_function(:'stdlib::has_interface_with') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "has_interface_with(): Wrong number of arguments given (#{args.size} for 1 or 2)") if args.empty? || args.size > 2

    interfaces = lookupvar('interfaces')

    # If we do not have any interfaces, then there are no requested attributes
    return false if interfaces == :undefined || interfaces.nil?

    interfaces = interfaces.split(',')

    if args.size == 1
      return interfaces.member?(args[0])
    end

    kind, value = args

    # Bug with 3.7.1 - 3.7.3  when using future parser throws :undefined_variable
    # https://tickets.puppetlabs.com/browse/PUP-3597
    factval = nil
    begin
      catch :undefined_variable do
        factval = lookupvar(kind)
      end
    rescue Puppet::ParseError # rubocop:disable Lint/HandleExceptions : Eat the exception if strict_variables = true is set
    end
    if factval == value
      return true
    end

    result = false
    interfaces.each do |iface|
      iface.downcase!
      factval = nil
      begin
        # Bug with 3.7.1 - 3.7.3 when using future parser throws :undefined_variable
        # https://tickets.puppetlabs.com/browse/PUP-3597
        catch :undefined_variable do
          factval = lookupvar("#{kind}_#{iface}")
        end
      rescue Puppet::ParseError # rubocop:disable Lint/HandleExceptions : Eat the exception if strict_variables = true is set
      end
      if value == factval
        result = true
        break
      end
    end

    result
  
  end
end
