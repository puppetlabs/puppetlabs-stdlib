# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# range.rb
#
# TODO(Krzysztof Wilczynski): We probably need to approach numeric values differently ...
# ---- original file header ----
#
# @summary
#       @summary
#      When given range in the form of (start, stop) it will extrapolate a range as
#      an array.
#
#    @return
#      the range is extrapolated as an array
#
#    @example **Usage**
#      range("0", "9")
#      Will return: [0,1,2,3,4,5,6,7,8,9]
#
#      range("00", "09")
#      Will return: [0,1,2,3,4,5,6,7,8,9]
#      (Zero padded strings are converted to integers automatically)
#
#      range("a", "c")
#      Will return: ["a","b","c"]
#
#      range("host01", "host10")
#      Will return: ["host01", "host02", ..., "host09", "host10"]
#
#      range("0", "9", "2")
#      Will return: [0,2,4,6,8]
#
#    NB Be explicit in including trailing zeros. Otherwise the underlying ruby function will fail.
#
#    > *Note:*
#      Passing a third argument will cause the generated range to step by that
#      interval, e.g.
#
#    The Puppet Language support Integer and Float ranges by using the type system. Those are suitable for
#    iterating a given number of times.
#
#    @see
#      the step() function in Puppet for skipping values.
#
#     Integer[0, 9].each |$x| { notice($x) } # notices 0, 1, 2, ... 9
#
#
Puppet::Functions.create_function(:'stdlib::range') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, 'range(): Wrong number of arguments given (0 for 1)') if arguments.empty?

    if arguments.size > 1
      start = arguments[0]
      stop  = arguments[1]
      step  = arguments[2].nil? ? 1 : arguments[2].to_i.abs

      type = '..' # Use the simplest type of Range available in Ruby

    else # arguments.size == 1
      value = arguments[0]

      m = value.match(%r{^(\w+)(\.\.\.?|\-)(\w+)$})
      if m
        start = m[1]
        stop  = m[3]

        type = m[2]
        step = 1
      elsif value =~ %r{^.+$}
        raise(Puppet::ParseError, "range(): Unable to compute range from the value: #{value}")
      else
        raise(Puppet::ParseError, "range(): Unknown range format: #{value}")
      end
    end

    # If we were given an integer, ensure we work with one
    if start.to_s =~ %r{^\d+$}
      start = start.to_i
      stop  = stop.to_i
    else
      start = start.to_s
      stop  = stop.to_s
    end

    range = case type
            when %r{^(..|-)$} then (start..stop)
            when '...' then (start...stop) # Exclusive of last element
            end

    result = range.step(step).first(1_000_000).to_a

    return result
  
  end
end
