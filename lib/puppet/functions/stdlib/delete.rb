# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# delete.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Deletes all instances of a given element from an array, substring from a
#      string, or key from a hash.
#
#    @example Example usage
#
#      delete(['a','b','c','b'], 'b')
#      Would return: ['a','c']
#
#      delete({'a'=>1,'b'=>2,'c'=>3}, 'b')
#      Would return: {'a'=>1,'c'=>3}
#
#      delete({'a'=>1,'b'=>2,'c'=>3}, ['b','c'])
#      Would return: {'a'=>1}
#
#      delete('abracadabra', 'bra')
#      Would return: 'acada'
#
#      ['a', 'b', 'c', 'b'] - 'b'
#      Would return: ['a', 'c']
#
#      {'a'=>1,'b'=>2,'c'=>3} - ['b','c'])
#      Would return: {'a' => '1'}
#
#      'abracadabra'.regsubst(/bra/, '', 'G')
#      Would return: 'acada'
#
#    > *Note:*
#    From Puppet 4.0.0 the minus (-) operator deletes values from arrays and keys from a hash
#    `{'a'=>1,'b'=>2,'c'=>3} - ['b','c'])`
#    >
#    A global delete from a string can be performed with the
#    [`regsubst`](https://puppet.com/docs/puppet/latest/function.html#regsubst) function:
#    `'abracadabra'.regsubst(/bra/, '', 'G')`
#
#    In general, the built-in [`filter`](https://puppet.com/docs/puppet/latest/function.html#filter)
#    function can filter out entries from arrays and hashes based on keys and/or values.
#
#    @return [String] The filtered String, if one was given.
#    @return [Hash] The filtered Hash, if one was given.
#    @return [Array] The filtered Array, if one was given.
#
#
Puppet::Functions.create_function(:'stdlib::delete') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "delete(): Wrong number of arguments given #{arguments.size} for 2") unless arguments.size == 2

    collection = arguments[0].dup
    Array(arguments[1]).each do |item|
      case collection
      when Array, Hash
        collection.delete item
      when String
        collection.gsub! item, ''
      else
        raise(TypeError, "delete(): First argument must be an Array, String, or Hash. Given an argument of class #{collection.class}.")
      end
    end
    collection
  
  end
end
