# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
# TODO(Krzysztof Wilczynski): We need to add support for regular expression ...
# TODO(Krzysztof Wilczynski): Support for strings and hashes too ...
#
# member.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      This function determines if a variable is a member of an array.
#
#    The variable can be a string, fixnum, or array.
#
#    > **Note**: This function does not support nested arrays. If the first argument contains
#    nested arrays, it will not recurse through them.
#
#    @example **Usage**
#      member(['a','b'], 'b') # Returns: true
#      member(['a', 'b', 'c'], ['a', 'b']) # Returns: true
#      member(['a','b'], 'c') # Returns: false
#      member(['a', 'b', 'c'], ['d', 'b']) # Returns: false
#
#    > *Note:*
#    Since Puppet 4.0.0 the same can be performed in the Puppet language.
#    For single values the operator `in` can be used:
#    `'a' in ['a', 'b']  # true`
#    For arrays by using operator `-` to compute a diff:
#    `['d', 'b'] - ['a', 'b', 'c'] == []  # false because 'd' is not subtracted`
#    `['a', 'b'] - ['a', 'b', 'c'] == []  # true because both 'a' and 'b' are subtracted`
#
#    @return
#      Returns whether the given value was a member of the array
#
#    > **Note** that since Puppet 5.2.0, the general form to test the content of an array or
#    hash is to use the built-in [`any`](https://puppet.com/docs/puppet/latest/function.html#any)
#    and [`all`](https://puppet.com/docs/puppet/latest/function.html#all) functions.
#
#
Puppet::Functions.create_function(:'stdlib::member') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "member(): Wrong number of arguments given (#{arguments.size} for 2)") if arguments.size < 2

    array = arguments[0]

    unless array.is_a?(Array)
      raise(Puppet::ParseError, 'member(): Requires array to work with')
    end

    unless arguments[1].is_a?(String) || arguments[1].is_a?(Integer) || arguments[1].is_a?(Array)
      raise(Puppet::ParseError, 'member(): Item to search for must be a string, fixnum, or array')
    end

    item = if arguments[1].is_a?(String) || arguments[1].is_a?(Integer)
             [arguments[1]]
           else
             arguments[1]
           end

    raise(Puppet::ParseError, 'member(): You must provide item to search for within array given') if item.respond_to?('empty?') && item.empty?

    result = (item - array).empty?

    return result
  
  end
end
