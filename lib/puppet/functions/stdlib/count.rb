# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# count.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Counts the number of elements in array.
#
#    Takes an array as first argument and an optional second argument. Counts the number of elements in array that is equal to the second argument.
#    If called with only an array, it counts the number of elements that are not nil/undef/empty-string.
#
#    > *Note:*
#      equality is tested with a Ruby method and it is therefore subject to what Ruby considers
#      to be equal. For strings this means that equality is case sensitive.
#
#    In Puppet core, counting can be done in general by using a combination of the core functions
#    filter() (since Puppet 4.0.0) and length() (since Puppet 5.5.0, before that in stdlib).
#
#    Example below shows counting values that are not undef.
#
#      ```notice([42, "hello", undef].filter |$x| { $x =~ NotUndef }.length)```
#
#    Would notice the value 2.
#
#    @return [Integer] The amount of elements counted within the array
#
#
Puppet::Functions.create_function(:'stdlib::count') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    if args.size > 2
      raise(ArgumentError, "count(): Wrong number of arguments given #{args.size} for 1 or 2.")
    end

    collection, item = args

    if item
      collection.count item
    else
      collection.count { |obj| !obj.nil? && obj != :undef && obj != '' }
    end
  
  end
end
