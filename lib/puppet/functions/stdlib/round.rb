# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# round.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Rounds a number to the nearest integer
#
#    @return
#      the rounded value as integer
#
#    @example
#
#    ```round(2.9)``` returns ```3```
#
#    ```round(2.4)``` returns ```2```
#
#    > *Note:* from Puppet 6.0.0, the compatible function with the same name in Puppet core
#      will be used instead of this function.
#
#
Puppet::Functions.create_function(:'stdlib::round') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise Puppet::ParseError, "round(): Wrong number of arguments given #{args.size} for 1" if args.size != 1
    raise Puppet::ParseError, "round(): Expected a Numeric, got #{args[0].class}" unless args[0].is_a? Numeric

    value = args[0]

    if value >= 0
      Integer(value + 0.5)
    else
      Integer(value - 0.5)
    end
  
  end
end
