# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# str2bool.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      This converts a string to a boolean.
#
#    @return
#      This attempt to convert to boolean strings that contain things like: Y,y, 1, T,t, TRUE,true to 'true' and strings that contain things
#      like: 0, F,f, N,n, false, FALSE, no to 'false'.
#
#    > *Note:* that since Puppet 5.0.0 the Boolean data type can convert strings to a Boolean value.
#    See the function new() in Puppet for details what the Boolean data type supports.
#
#
Puppet::Functions.create_function(:'stdlib::str2bool') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "str2bool(): Wrong number of arguments given (#{arguments.size} for 1)") if arguments.empty?

    string = arguments[0]

    # If string is already Boolean, return it
    if !!string == string # rubocop:disable Style/DoubleNegation : No viable alternative
      return string
    end

    unless string.is_a?(String)
      raise(Puppet::ParseError, 'str2bool(): Requires string to work with')
    end

    # We consider all the yes, no, y, n and so on too ...
    result = case string
             #
             # This is how undef looks like in Puppet ...
             # We yield false in this case.
             #
             when %r{^$}, '' then false # Empty string will be false ...
             when %r{^(1|t|y|true|yes)$}i  then true
             when %r{^(0|f|n|false|no)$}i  then false
             when %r{^(undef|undefined)$} then false # This is not likely to happen ...
             else
               raise(Puppet::ParseError, 'str2bool(): Unknown type of boolean given')
             end

    return result
  
  end
end
