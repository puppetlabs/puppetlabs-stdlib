# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# dig44.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      **DEPRECATED**: Looks up into a complex structure of arrays and hashes and returns a value
#      or the default value if nothing was found.
#
#    Key can contain slashes to describe path components. The function will go down
#    the structure and try to extract the required value.
#
#    ```
#    $data = {
#      'a' => {
#        'b' => [
#          'b1',
#          'b2',
#          'b3',
#        ]
#      }
#    }
#
#    $value = dig44($data, ['a', 'b', 2])
#    # $value = 'b3'
#
#    # with all possible options
#    $value = dig44($data, ['a', 'b', 2], 'not_found')
#    # $value = 'b3'
#
#    # using the default value
#    $value = dig44($data, ['a', 'b', 'c', 'd'], 'not_found')
#    # $value = 'not_found'
#    ```
#
#    > **Note:* **Deprecated** This function has been replaced with a built-in
#      [`dig`](https://puppet.com/docs/puppet/latest/function.html#dig) function as of
#      Puppet 4.5.0.
#
#    @return [String] 'not_found' will be returned if nothing is found
#    @return [Any] the value that was searched for
#
#
Puppet::Functions.create_function(:'stdlib::dig44') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    
    # Two arguments are required
    raise(Puppet::ParseError, "dig44(): Wrong number of arguments given (#{arguments.size} for at least 2)") if arguments.size < 2

    data, path, default = *arguments

    raise(Puppet::ParseError, "dig44(): first argument must be a hash or an array, given #{data.class.name}") unless data.is_a?(Hash) || data.is_a?(Array)
    raise(Puppet::ParseError, "dig44(): second argument must be an array, given #{path.class.name}") unless path.is_a? Array

    value = path.reduce(data) do |structure, key|
      break unless structure.is_a?(Hash) || structure.is_a?(Array)
      if structure.is_a? Array
        begin
          key = Integer key
        rescue
          break
        end
      end
      break if structure[key].nil? || structure[key] == :undef
      structure[key]
    end
    value.nil? ? default : value
  
  end
end
