# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# seeded_rand.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Generates a random whole number greater than or equal to 0 and less than MAX, using the value of SEED for repeatable randomness.
#
#    @return
#      random number greater than or equal to 0 and less than MAX
#
#    @example **Usage:**
#      seeded_rand(MAX, SEED).
#      MAX must be a positive integer; SEED is any string.
#
#    Generates a random whole number greater than or equal to 0 and less
#    than MAX, using the value of SEED for repeatable randomness.  If SEED
#    starts with "$fqdn:", this is behaves the same as `fqdn_rand`.
#
#
Puppet::Functions.create_function(:'stdlib::seeded_rand') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
  require 'digest/md5'

  raise(ArgumentError, 'seeded_rand(): first argument must be a positive integer') unless function_is_integer([args[0]]) && args[0].to_i > 0
  raise(ArgumentError, 'seeded_rand(): second argument must be a string') unless args[1].is_a? String

  max = args[0].to_i
  seed = Digest::MD5.hexdigest(args[1]).hex
  Puppet::Util.deterministic_rand(seed, max)

  end
end
