# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# bool2num.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Converts a boolean to a number.
#
#    Converts the values:
#      ```
#      false, f, 0, n, and no to 0
#      true, t, 1, y, and yes to 1
#      ```
#    Requires a single boolean or string as an input.
#
#    > *Note:*
#      since Puppet 5.0.0 it is possible to create new data types for almost any
#      datatype using the type system and the built-in
#      [`Numeric.new`](https://puppet.com/docs/puppet/latest/function.html#conversion-to-numeric),
#      [`Integer.new`](https://puppet.com/docs/puppet/latest/function.html#conversion-to-integer), and
#      [`Float.new`](https://puppet.com/docs/puppet/latest/function.html#conversion-to-float)
#      function are used to convert to numeric values.
#      ```
#      notice(Integer(false)) # Notices 0
#      notice(Float(true))    # Notices 1.0
#      ```
#
#    @return [Integer] The converted value as a number
#
#
Puppet::Functions.create_function(:'stdlib::bool2num') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    raise(Puppet::ParseError, "bool2num(): Wrong number of arguments given (#{arguments.size} for 1)") if arguments.empty?

    value = function_str2bool([arguments[0]])

    # We have real boolean values as well ...
    result = value ? 1 : 0

    return result
  
  end
end
