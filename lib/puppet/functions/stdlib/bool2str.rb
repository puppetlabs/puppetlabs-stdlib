# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# bool2str.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Converts a boolean to a string using optionally supplied arguments.
#
#    The optional second and third arguments represent what true and false will be
#    converted to respectively. If only one argument is given, it will be
#    converted from a boolean to a string containing 'true' or 'false'.
#
#    @return
#      The converted value to string of the given Boolean
#
#    **Examples of usage**
#
#      ```
#        bool2str(true)                    => 'true'
#        bool2str(true, 'yes', 'no')       => 'yes'
#        bool2str(false, 't', 'f')         => 'f'
#      ```
#
#    Requires a single boolean as an input.
#
#    > *Note:*
#      since Puppet 5.0.0 it is possible to create new data types for almost any
#      datatype using the type system and the built-in
#      [`String.new`](https://puppet.com/docs/puppet/latest/function.html#boolean-to-string)
#      function is used to convert to String with many different format options.
#
#      ```
#        notice(String(false))         # Notices 'false'
#        notice(String(true))          # Notices 'true'
#        notice(String(false, '%y'))   # Notices 'yes'
#        notice(String(true, '%y'))    # Notices 'no'
#      ```
#
#
Puppet::Functions.create_function(:'stdlib::bool2str') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    unless arguments.size == 1 || arguments.size == 3
      raise(Puppet::ParseError, "bool2str(): Wrong number of arguments given (#{arguments.size} for 3)")
    end

    value = arguments[0]
    true_string = arguments[1] || 'true'
    false_string = arguments[2] || 'false'
    klass = value.class

    # We can have either true or false, and nothing else
    unless [FalseClass, TrueClass].include?(klass)
      raise(Puppet::ParseError, 'bool2str(): Requires a boolean to work with')
    end

    unless [true_string, false_string].all? { |x| x.is_a?(String) }
      raise(Puppet::ParseError, 'bool2str(): Requires strings to convert to')
    end

    return value ? true_string : false_string
  
  end
end
