# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# is_integer.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      **Deprecated:** Returns true if the variable passed to this function is an Integer or
#      a decimal (base 10) integer in String form.
#
#    The string may start with a '-' (minus). A value of '0' is allowed, but a leading '0'
#    digit may not be followed by other digits as this indicates that the value is octal (base 8).
#
#    If given any other argument `false` is returned.
#
#    @return [Boolean]
#      Returns `true` or `false`
#
#    > **Note:* **Deprecated** Will be removed in a future version of stdlib. See
#    [`validate_legacy`](#validate_legacy).
#
#
Puppet::Functions.create_function(:'stdlib::is_integer') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    function_deprecation([:is_integer, 'This method is deprecated, please use the stdlib validate_legacy function,
                            with Stdlib::Compat::Integer. There is further documentation for validate_legacy function in the README.'])

    if arguments.size != 1
      raise(Puppet::ParseError, "is_integer(): Wrong number of arguments given #{arguments.size} for 1")
    end

    value = arguments[0]

    # Regex is taken from the lexer of puppet
    # puppet/pops/parser/lexer.rb but modified to match also
    # negative values and disallow numbers prefixed with multiple
    # 0's
    #
    # TODO these parameter should be a constant but I'm not sure
    # if there is no risk to declare it inside of the module
    # Puppet::Parser::Functions

    # Integer numbers like
    # -1234568981273
    # 47291
    numeric = %r{^-?(?:(?:[1-9]\d*)|0)$}

    return true if value.is_a?(Integer) || (value.is_a?(String) && value.match(numeric))
    return false
  
  end
end
