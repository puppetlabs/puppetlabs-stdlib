# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# reject.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      This function searches through an array and rejects all elements that match
#      the provided regular expression.
#
#    @return
#      an array containing all the elements which doesn'' match the provided regular expression
#
#    @example **Usage**
#
#      reject(['aaa','bbb','ccc','aaaddd'], 'aaa')
#
#      Would return: ['bbb','ccc']
#
#    > *Note:*
#    Since Puppet 4.0.0 the same is in general done with the filter function. Here is the equivalence of the reject() function:
#    ['aaa','bbb','ccc','aaaddd'].filter |$x| { $x !~ /aaa/ }
#
#
Puppet::Functions.create_function(:'stdlib::reject') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    if args.size != 2
      raise Puppet::ParseError,
            "reject(): Wrong number of arguments given #{args.size} for 2"
    end

    ary = args[0]
    pattern = Regexp.new(args[1])

    ary.reject { |e| e =~ pattern }
  
  end
end
