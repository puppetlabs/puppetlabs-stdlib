# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# is_function_available.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      **Deprecated:** Determines whether the Puppet runtime has access to a function by that name.
#
#    This function accepts a string as an argument.
#
#    @return [Boolean]
#      Returns `true` or `false`
#
#    > **Note:* **Deprecated** Will be removed in a future version of stdlib. See
#    [`validate_legacy`](#validate_legacy).
#
#
Puppet::Functions.create_function(:'stdlib::is_function_available') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    if arguments.size != 1
      raise(Puppet::ParseError, "is_function_available?(): Wrong number of arguments given #{arguments.size} for 1")
    end

    # Only allow String types
    return false unless arguments[0].is_a?(String)

    function = Puppet::Parser::Functions.function(arguments[0].to_sym)
    function.is_a?(String) && !function.empty?
  
  end
end
