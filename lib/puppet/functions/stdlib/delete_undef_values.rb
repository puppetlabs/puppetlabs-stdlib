# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# delete_undef_values.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Returns a copy of input hash or array with all undefs deleted.
#
#    @example Example usage
#
#      $hash = delete_undef_values({a=>'A', b=>'', c=>undef, d => false})
#      Would return: {a => 'A', b => '', d => false}
#
#      While:
#      $array = delete_undef_values(['A','',undef,false])
#      Would return: ['A','',false]
#
#    > *Note:*
#    Since Puppet 4.0.0 the equivalent can be performed with the built-in
#    [`filter`](https://puppet.com/docs/puppet/latest/function.html#filter) function:
#    $array.filter |$val| { $val =~ NotUndef }
#    $hash.filter |$key, $val| { $val =~ NotUndef }
#
#    @return [Array] The given array now issing of undefined values.
#
#
Puppet::Functions.create_function(:'stdlib::delete_undef_values') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    raise(Puppet::ParseError, "delete_undef_values(): Wrong number of arguments given (#{args.size})") if args.empty?

    unless args[0].is_a?(Array) || args[0].is_a?(Hash)
      raise(Puppet::ParseError, "delete_undef_values(): expected an array or hash, got #{args[0]} type  #{args[0].class} ")
    end
    result = args[0].dup
    if result.is_a?(Hash)
      result.delete_if { |_, val| val.equal?(:undef) || val.nil? }
    elsif result.is_a?(Array)
      result.delete :undef
      result.delete nil
    end
    result
  
  end
end
